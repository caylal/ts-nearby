"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cfg_config_1 = require("../config/cfg.config");
var log_interface_1 = require("./log.interface");
var log_console_1 = require("./log.console");
var LogFactory = (function () {
    function LogFactory() {
    }
    LogFactory.get = function (name) {
        var result;
        var key;
        if (!!name && typeof name === 'string') {
            key = !!name ? name : LogFactory.DEFAULT_KEY;
        }
        else {
            var t = name;
            key = t.name || t.constructor.name || LogFactory.DEFAULT_KEY;
        }
        if (!LogFactory.logs[key]) {
            var lschema = cfg_config_1.logConfig[key];
            if (!lschema) {
                lschema = cfg_config_1.logConfig[LogFactory.DEFAULT_KEY];
            }
            var level = !!lschema.level ? lschema.level : 'on';
            var type = !!lschema.type ? lschema.type : 'console';
            if (type === 'console') {
                result = new log_console_1.ConsoleLog({
                    name: key,
                    level: LogFactory.transLevel(level)
                });
                LogFactory.logs[key] = result;
            }
        }
        else {
            result = LogFactory.logs[key];
        }
        return result;
    };
    LogFactory.transLevel = function (level) {
        var result = log_interface_1.Level.OFF;
        switch (level.toLowerCase()) {
            case 'on':
                result = log_interface_1.Level.ON;
                break;
            case 'info':
                result = log_interface_1.Level.INFO;
                break;
            case 'warn':
                result = log_interface_1.Level.WARN;
                break;
            case 'error':
                result = log_interface_1.Level.ERROR;
                break;
            default:
                result = log_interface_1.Level.OFF;
                break;
        }
        return result;
    };
    LogFactory.logs = {};
    LogFactory.DEFAULT_KEY = 'default';
    return LogFactory;
}());
exports.LogFactory = LogFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2cuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUE4QztBQUM5QyxpREFBMkM7QUFDM0MsNkNBQXdDO0FBS3hDO0lBQUE7SUF3REEsQ0FBQztJQXBEVSxjQUFHLEdBQVYsVUFBVyxJQUFxQjtRQUM1QixJQUFJLE1BQVksQ0FBQztRQUNqQixJQUFJLEdBQVcsQ0FBQztRQUNoQixJQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ25DLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUE7U0FDL0M7YUFBSztZQUNGLElBQU0sQ0FBQyxHQUFhLElBQUksQ0FBQztZQUN6QixHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFBO1NBQy9EO1FBQ0QsSUFBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUM7WUFDckIsSUFBSSxPQUFPLEdBQUcsc0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3QixJQUFHLENBQUMsT0FBTyxFQUFFO2dCQUNULE9BQU8sR0FBRyxzQkFBUyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTthQUM5QztZQUVELElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDckQsSUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN2RCxJQUFHLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ25CLE1BQU0sR0FBRyxJQUFJLHdCQUFVLENBQUM7b0JBQ3BCLElBQUksRUFBRSxHQUFHO29CQUNULEtBQUssRUFBRSxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztpQkFDdEMsQ0FBQyxDQUFDO2dCQUNILFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO2FBQ2pDO1NBQ0o7YUFBTTtZQUNILE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2pDO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVjLHFCQUFVLEdBQXpCLFVBQTBCLEtBQWE7UUFDbkMsSUFBSSxNQUFNLEdBQVUscUJBQUssQ0FBQyxHQUFHLENBQUM7UUFDOUIsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDekIsS0FBSyxJQUFJO2dCQUNMLE1BQU0sR0FBRyxxQkFBSyxDQUFDLEVBQUUsQ0FBQztnQkFDbEIsTUFBTTtZQUNWLEtBQUssTUFBTTtnQkFDUCxNQUFNLEdBQUcscUJBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU07WUFDVixLQUFLLE1BQU07Z0JBQ1AsTUFBTSxHQUFHLHFCQUFLLENBQUMsSUFBSSxDQUFDO2dCQUNwQixNQUFNO1lBQ1YsS0FBSyxPQUFPO2dCQUNSLE1BQU0sR0FBRyxxQkFBSyxDQUFDLEtBQUssQ0FBQztnQkFDckIsTUFBTTtZQUNWO2dCQUNJLE1BQU0sR0FBRyxxQkFBSyxDQUFDLEdBQUcsQ0FBQTtnQkFDbEIsTUFBTTtTQUNiO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQXREYyxlQUFJLEdBQVksRUFBRSxDQUFDO0lBQ25CLHNCQUFXLEdBQVcsU0FBUyxDQUFDO0lBc0RuRCxpQkFBQztDQUFBLEFBeERELElBd0RDO0FBeERZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtsb2dDb25maWd9IGZyb20gJy4uL2NvbmZpZy9jZmcuY29uZmlnJ1xyXG5pbXBvcnQge0lMb2csIExldmVsfSBmcm9tICcuL2xvZy5pbnRlcmZhY2UnXHJcbmltcG9ydCB7Q29uc29sZUxvZ30gZnJvbSAnLi9sb2cuY29uc29sZSdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9nTGlzdCB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBJTG9nXHJcbn1cclxuZXhwb3J0IGNsYXNzIExvZ0ZhY3Rvcnkge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbG9nczogTG9nTGlzdCA9IHt9O1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgREVGQVVMVF9LRVk6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuXHJcbiAgICBzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyB8IG9iamVjdCk6IElMb2cge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IElMb2c7XHJcbiAgICAgICAgbGV0IGtleTogc3RyaW5nO1xyXG4gICAgICAgIGlmKCEhbmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAga2V5ID0gISFuYW1lID8gbmFtZSA6IExvZ0ZhY3RvcnkuREVGQVVMVF9LRVlcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQ6IGFueSA9IDxhbnk+bmFtZTtcclxuICAgICAgICAgICAga2V5ID0gdC5uYW1lIHx8IHQuY29uc3RydWN0b3IubmFtZSB8fCBMb2dGYWN0b3J5LkRFRkFVTFRfS0VZXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCFMb2dGYWN0b3J5LmxvZ3Nba2V5XSl7XHJcbiAgICAgICAgICAgIGxldCBsc2NoZW1hID0gbG9nQ29uZmlnW2tleV07XHJcbiAgICAgICAgICAgIGlmKCFsc2NoZW1hKSB7XHJcbiAgICAgICAgICAgICAgICBsc2NoZW1hID0gbG9nQ29uZmlnW0xvZ0ZhY3RvcnkuREVGQVVMVF9LRVldXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsID0gISFsc2NoZW1hLmxldmVsID8gbHNjaGVtYS5sZXZlbCA6ICdvbic7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAhIWxzY2hlbWEudHlwZSA/IGxzY2hlbWEudHlwZSA6ICdjb25zb2xlJztcclxuICAgICAgICAgICAgaWYodHlwZSA9PT0gJ2NvbnNvbGUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgQ29uc29sZUxvZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsOiBMb2dGYWN0b3J5LnRyYW5zTGV2ZWwobGV2ZWwpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIExvZ0ZhY3RvcnkubG9nc1trZXldID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gTG9nRmFjdG9yeS5sb2dzW2tleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHRyYW5zTGV2ZWwobGV2ZWw6IHN0cmluZyk6IExldmVsIHtcclxuICAgICAgICBsZXQgcmVzdWx0OiBMZXZlbCA9IExldmVsLk9GRjtcclxuICAgICAgICBzd2l0Y2ggKGxldmVsLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnb24nOiBcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IExldmVsLk9OO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2luZm8nOiBcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IExldmVsLklORk87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnd2Fybic6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBMZXZlbC5XQVJOO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IExldmVsLkVSUk9SO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBMZXZlbC5PRkZcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59Il19