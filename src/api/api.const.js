"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Method = {
    get: 'get',
    post: 'post',
    put: 'put',
    delete: 'delete'
};
var Restful = (function () {
    function Restful(url) {
        this.post = exports.Method.post + ' ' + url;
        this.delete = exports.Method.delete + ' ' + url + '/{id}';
        this.put = exports.Method.put + ' ' + url;
        this.get = url + '/{id}';
        this.query = url;
    }
    return Restful;
}());
exports.Restful = Restful;
exports.Apis = {
    area: {
        restful: new Restful('area'),
        queryCity: 'area/city'
    },
    nbhd: {
        restful: new Restful('neighbor'),
        queryArea: 'neighbor/area',
        queryLngLat: 'neighbor/lnglat'
    },
    shop: {
        queryNbhd: 'shop/byNbhd',
        goods: new Restful('shop/goods'),
        queryCate: 'shop/goods/cate/byShop',
        queryGoodsByCate: 'shop/goods/byShopAndCate',
        queryGoodsByAddress: 'shop/byAddressWithGoods',
    },
    cate: {
        queryCate: 'category/tree',
    },
    banner: {
        queryBanner: 'banner/byNbhd',
    },
    rec: {
        restful: new Restful('recommendGoods'),
        queryOfMy: 'recommendGoods/my',
    },
    hot: {
        restful: new Restful('hotGoods'),
        queryOfNbhd: 'hotGoods/byNbhd',
    },
    cart: {
        restful: new Restful('shoppingcart'),
        queryOfMy: 'shoppingcart/my',
    },
    goods: {
        restful: new Restful('goods'),
        queryByCate: 'goods/byCate',
    },
    order: {
        restful: new Restful('order'),
        queryOfMy: 'order/my',
        payment: "post order/pay/wx"
    },
    addr: {
        restful: new Restful('address'),
        queryOfMy: 'address/my',
    },
    auth: {
        login: 'auth/login/wx',
        refresh: 'auth/refresh'
    },
    user: {
        restful: new Restful('user')
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmNvbnN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLmNvbnN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ2EsUUFBQSxNQUFNLEdBQUc7SUFDbEIsR0FBRyxFQUFFLEtBQUs7SUFDVixJQUFJLEVBQUUsTUFBTTtJQUNaLEdBQUcsRUFBRSxLQUFLO0lBQ1YsTUFBTSxFQUFFLFFBQVE7Q0FDakIsQ0FBQTtBQUVIO0lBT0ksaUJBQVksR0FBVztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLGNBQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUE7UUFDakQsSUFBSSxDQUFDLEdBQUcsR0FBRyxjQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDakMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFBO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFBO0lBQ3BCLENBQUM7SUFDTCxjQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7QUFkWSwwQkFBTztBQWdCUCxRQUFBLElBQUksR0FBRztJQUNoQixJQUFJLEVBQUU7UUFDRixPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzVCLFNBQVMsRUFBRSxXQUFXO0tBQ3RCO0lBQ0YsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUNoQyxTQUFTLEVBQUUsZUFBZTtRQUMxQixXQUFXLEVBQUUsaUJBQWlCO0tBQy9CO0lBQ0QsSUFBSSxFQUFFO1FBQ0osU0FBUyxFQUFFLGFBQWE7UUFDeEIsS0FBSyxFQUFFLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQztRQUNoQyxTQUFTLEVBQUUsd0JBQXdCO1FBQ25DLGdCQUFnQixFQUFFLDBCQUEwQjtRQUM1QyxtQkFBbUIsRUFBRSx5QkFBeUI7S0FDL0M7SUFDRCxJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsZUFBZTtLQUMzQjtJQUNELE1BQU0sRUFBRTtRQUNOLFdBQVcsRUFBRSxlQUFlO0tBQzdCO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDO1FBQ3RDLFNBQVMsRUFBRSxtQkFBbUI7S0FDL0I7SUFDRCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ2hDLFdBQVcsRUFBRSxpQkFBaUI7S0FDL0I7SUFDRCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxpQkFBaUI7S0FDN0I7SUFDRCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzdCLFdBQVcsRUFBRSxjQUFjO0tBQzVCO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUM3QixTQUFTLEVBQUUsVUFBVTtRQUNyQixPQUFPLEVBQUUsbUJBQW1CO0tBQzdCO0lBQ0QsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUMvQixTQUFTLEVBQUUsWUFBWTtLQUN4QjtJQUNELElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxlQUFlO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO0tBQ3hCO0lBQ0QsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztLQUM3QjtDQUNOLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNvbnN0IE1ldGhvZCA9IHtcclxuICAgIGdldDogJ2dldCcsXHJcbiAgICBwb3N0OiAncG9zdCcsXHJcbiAgICBwdXQ6ICdwdXQnLFxyXG4gICAgZGVsZXRlOiAnZGVsZXRlJ1xyXG4gIH1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXN0ZnVsIHtcclxuICAgIHBvc3Q6IHN0cmluZztcclxuICAgIGRlbGV0ZTogc3RyaW5nO1xyXG4gICAgcHV0OiBzdHJpbmc7XHJcbiAgICBnZXQ6IHN0cmluZztcclxuICAgIHF1ZXJ5OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnBvc3QgPSBNZXRob2QucG9zdCArICcgJyArIHVybFxyXG4gICAgICAgIHRoaXMuZGVsZXRlID0gTWV0aG9kLmRlbGV0ZSArICcgJyArIHVybCArICcve2lkfSdcclxuICAgICAgICB0aGlzLnB1dCA9IE1ldGhvZC5wdXQgKyAnICcgKyB1cmxcclxuICAgICAgICB0aGlzLmdldCA9IHVybCArICcve2lkfSdcclxuICAgICAgICB0aGlzLnF1ZXJ5ID0gdXJsXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBcGlzID0ge1xyXG4gICAgYXJlYTogeyBcclxuICAgICAgICByZXN0ZnVsOiBuZXcgUmVzdGZ1bCgnYXJlYScpLCAgLy8g6I635Y+W5Yy65Z+f5L+h5oGvXHJcbiAgICAgICAgcXVlcnlDaXR5OiAnYXJlYS9jaXR5JyAgLy8g6I635Y+W5omA5pyJ5Z+O5biC5L+h5oGvICBcclxuICAgICAgIH0sICAgICAgICAgICBcclxuICAgICAgbmJoZDogeyBcclxuICAgICAgICByZXN0ZnVsOiBuZXcgUmVzdGZ1bCgnbmVpZ2hib3InKSxcclxuICAgICAgICBxdWVyeUFyZWE6ICduZWlnaGJvci9hcmVhJywgICAvLyDojrflj5bmiYDlnKjljLrln5/nmoTnpL7ljLrliJfooagg5Y+C5pWwe3BpOjEsIHBzOjIwLGFyZWFpZDpcIkEwMDE2XCJ9XHJcbiAgICAgICAgcXVlcnlMbmdMYXQ6ICduZWlnaGJvci9sbmdsYXQnIC8vIOafpeivoue7j+e6rOW6pumZhOi/keeahOekvuWMuuWIl+ihqFxyXG4gICAgICB9LFxyXG4gICAgICBzaG9wOiB7IFxyXG4gICAgICAgIHF1ZXJ5TmJoZDogJ3Nob3AvYnlOYmhkJywgICAgICAgICAvLyDojrflj5bmiYDlnKjnpL7ljLrnmoTpl6jlupcg5Y+C5pWwe3BhZ2VJbmRleDoxLCBwYWdlU2l6ZToxMCxpZDpcIk4wMDBcIixsbmc6XCIyMi42MzQ4OTI4ODg5XCIsICBsYXQ6XCIxMTQuMDMyMTMyOTAxOFwifeekvuWMumlk77yM57uP57qs5bqmXHJcbiAgICAgICAgZ29vZHM6IG5ldyBSZXN0ZnVsKCdzaG9wL2dvb2RzJyksICAgICAgICAvLyDojrflj5bor6Xpl6jlupfljZXkuKrllYblk4Hkv6Hmga8g5Y+C5pWwIHtpZDogXCJTRzAwMDBcIn0g6Zeo5bqX5ZWG5ZOBaWRcclxuICAgICAgICBxdWVyeUNhdGU6ICdzaG9wL2dvb2RzL2NhdGUvYnlTaG9wJywgICAvLyDojrflj5bor6Xpl6jlupfnmoTllYblk4HmiYDmnInnsbvliKsg5Y+C5pWwIHtzaG9wOiBcIlMwMDAwXCJ9IOmXqOW6l2lkXHJcbiAgICAgICAgcXVlcnlHb29kc0J5Q2F0ZTogJ3Nob3AvZ29vZHMvYnlTaG9wQW5kQ2F0ZScsICAvLyDojrflj5bpl6jlupfor6XnsbvliKvnmoTllYblk4Eg5Y+C5pWwe3BpOjEsIHBzOjEwLHNob3A6XCJTMDAwMFwiLGNhdGU6XCJDMDAwMVwifemXqOW6l2lk77yM57G75YiraWRcclxuICAgICAgICBxdWVyeUdvb2RzQnlBZGRyZXNzOiAnc2hvcC9ieUFkZHJlc3NXaXRoR29vZHMnLFxyXG4gICAgICB9LFxyXG4gICAgICBjYXRlOiB7XHJcbiAgICAgICAgcXVlcnlDYXRlOiAnY2F0ZWdvcnkvdHJlZScsICAgLy8g6I635Y+W5omA5pyJ5ZWG5ZOB57G75YirXHJcbiAgICAgIH0sXHJcbiAgICAgIGJhbm5lcjoge1xyXG4gICAgICAgIHF1ZXJ5QmFubmVyOiAnYmFubmVyL2J5TmJoZCcsICAvLyDojrflj5bmiYDlnKjnpL7ljLrpppbpobViYW5uZXIg5Y+C5pWwe3BhZ2VJbmRleDogMSxwYWdlU2l6ZTogMywgaWQ6IFwiTjAwMFwifSDnpL7ljLppZFxyXG4gICAgICB9LFxyXG4gICAgICByZWM6IHtcclxuICAgICAgICByZXN0ZnVsOiBuZXcgUmVzdGZ1bCgncmVjb21tZW5kR29vZHMnKSxcclxuICAgICAgICBxdWVyeU9mTXk6ICdyZWNvbW1lbmRHb29kcy9teScsICAgICAgICAgICAgLy8g5oiR55qE5o6o6I2Q5ZWG5ZOBIOWPguaVsHtwYWdlSW5kZXg6IDEsIHBhZ2VTaXplOiAzLCB1aWQ6IFwiVTAwMDAwMDAwXCIsIG5pZDogXCJOMDAwXCJ9IOeUqOaIt2lk77yM56S+5Yy6aWRcclxuICAgICAgfSxcclxuICAgICAgaG90OiB7XHJcbiAgICAgICAgcmVzdGZ1bDogbmV3IFJlc3RmdWwoJ2hvdEdvb2RzJyksXHJcbiAgICAgICAgcXVlcnlPZk5iaGQ6ICdob3RHb29kcy9ieU5iaGQnLCAgICAgICAgICAgICAgICAvLyDnpL7ljLrlhoXng63ljZbllYblk4Eg5Y+C5pWwe3BpOiAxLHBzOiAzLCBuYmhkOiBcIk4wMDBcIn0g56S+5Yy6aWRcclxuICAgICAgfSxcclxuICAgICAgY2FydDoge1xyXG4gICAgICAgIHJlc3RmdWw6IG5ldyBSZXN0ZnVsKCdzaG9wcGluZ2NhcnQnKSxcclxuICAgICAgICBxdWVyeU9mTXk6ICdzaG9wcGluZ2NhcnQvbXknLCAgICAgIC8vIOiOt+WPluaIkeeahOi0reeJqei9piDlj4LmlbB7cGFnZUluZGV4OiAxLCBwYWdlU2l6ZTogMywgdWlkOiBcIlUwMDAwMDAwMFwifSDnlKjmiLdpZFxyXG4gICAgICB9LFxyXG4gICAgICBnb29kczoge1xyXG4gICAgICAgIHJlc3RmdWw6IG5ldyBSZXN0ZnVsKCdnb29kcycpLFxyXG4gICAgICAgIHF1ZXJ5QnlDYXRlOiAnZ29vZHMvYnlDYXRlJywgICAgICAgICAgICAgICAgICAgLy8g5qC55o2u57G75Yir6I635Y+W5ZWG5ZOB5L+h5oGvIOWPguaVsHtwYWdlSW5kZXg6IDEsIHBhZ2VTaXplOiAyMCwgY2F0ZTpcIkMwMDI1XCJ9XHJcbiAgICAgIH0sXHJcbiAgICAgIG9yZGVyOiB7XHJcbiAgICAgICAgcmVzdGZ1bDogbmV3IFJlc3RmdWwoJ29yZGVyJyksXHJcbiAgICAgICAgcXVlcnlPZk15OiAnb3JkZXIvbXknLCAgICAgICAgICAgICAgICAgICAgIC8vIOiOt+WPluaIkeeahOiuouWNleS/oeaBr+WPguaVsHtwaTogMSwgcHM6IDIwLHVpZDp9XHJcbiAgICAgICAgcGF5bWVudDogXCJwb3N0IG9yZGVyL3BheS93eFwiICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGFkZHI6IHtcclxuICAgICAgICByZXN0ZnVsOiBuZXcgUmVzdGZ1bCgnYWRkcmVzcycpLFxyXG4gICAgICAgIHF1ZXJ5T2ZNeTogJ2FkZHJlc3MvbXknLCAgICAgICAgICAgICAgICAgICAvLyDojrflj5blnLDlnYDkv6Hmga8g5Y+C5pWwIHt1c2VyaWQ6ICdVMDAwMDAwMDAxJ30gIFxyXG4gICAgICB9LFxyXG4gICAgICBhdXRoOiB7XHJcbiAgICAgICAgbG9naW46ICdhdXRoL2xvZ2luL3d4JywgICAgICAgICAgICAgICAgICAgICAgLy8g55m75b2VICAgICAgXHJcbiAgICAgICAgcmVmcmVzaDogJ2F1dGgvcmVmcmVzaCdcclxuICAgICAgfSxcclxuICAgICAgdXNlcjoge1xyXG4gICAgICAgIHJlc3RmdWw6IG5ldyBSZXN0ZnVsKCd1c2VyJylcclxuICAgICAgfVxyXG59Il19