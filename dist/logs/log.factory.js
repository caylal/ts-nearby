"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cfg_config_1 = require("../config/cfg.config");
var log_interface_1 = require("./log.interface");
var log_console_1 = require("./log.console");
var LogFactory = (function () {
    function LogFactory() {
    }
    LogFactory.get = function (name) {
        var result;
        var key;
        if (!!name && typeof name === 'string') {
            key = !!name ? name : LogFactory.DEFAULT_KEY;
        }
        else {
            var t = name;
            key = t.name || t.constructor.name || LogFactory.DEFAULT_KEY;
        }
        if (!LogFactory.logs[key]) {
            var lschema = cfg_config_1.logConfig[key];
            if (!lschema) {
                lschema = cfg_config_1.logConfig[LogFactory.DEFAULT_KEY];
            }
            var level = !!lschema.level ? lschema.level : 'on';
            var type = !!lschema.type ? lschema.type : 'console';
            if (type === 'console') {
                result = new log_console_1.ConsoleLog({
                    name: key,
                    level: LogFactory.transLevel(level)
                });
                LogFactory.logs[key] = result;
            }
        }
        else {
            result = LogFactory.logs[key];
        }
        return result;
    };
    LogFactory.transLevel = function (level) {
        var result = log_interface_1.Level.OFF;
        switch (level.toLowerCase()) {
            case 'on':
                result = log_interface_1.Level.ON;
                break;
            case 'info':
                result = log_interface_1.Level.INFO;
                break;
            case 'warn':
                result = log_interface_1.Level.WARN;
                break;
            case 'error':
                result = log_interface_1.Level.ERROR;
                break;
            default:
                result = log_interface_1.Level.OFF;
                break;
        }
        return result;
    };
    LogFactory.logs = {};
    LogFactory.DEFAULT_KEY = 'default';
    return LogFactory;
}());
exports.LogFactory = LogFactory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ3MvbG9nLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBOEM7QUFDOUMsaURBQTJDO0FBQzNDLDZDQUF3QztBQUt4QztJQUFBO0lBd0RBLENBQUM7SUFwRFUsY0FBRyxHQUFWLFVBQVcsSUFBcUI7UUFDNUIsSUFBSSxNQUFZLENBQUM7UUFDakIsSUFBSSxHQUFXLENBQUM7UUFDaEIsSUFBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNuQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFBO1NBQy9DO2FBQUs7WUFDRixJQUFNLENBQUMsR0FBYSxJQUFJLENBQUM7WUFDekIsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQTtTQUMvRDtRQUNELElBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDO1lBQ3JCLElBQUksT0FBTyxHQUFHLHNCQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsSUFBRyxDQUFDLE9BQU8sRUFBRTtnQkFDVCxPQUFPLEdBQUcsc0JBQVMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUE7YUFDOUM7WUFFRCxJQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3JELElBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDdkQsSUFBRyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUNuQixNQUFNLEdBQUcsSUFBSSx3QkFBVSxDQUFDO29CQUNwQixJQUFJLEVBQUUsR0FBRztvQkFDVCxLQUFLLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7aUJBQ3RDLENBQUMsQ0FBQztnQkFDSCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQzthQUNqQztTQUNKO2FBQU07WUFDSCxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFYyxxQkFBVSxHQUF6QixVQUEwQixLQUFhO1FBQ25DLElBQUksTUFBTSxHQUFVLHFCQUFLLENBQUMsR0FBRyxDQUFDO1FBQzlCLFFBQVEsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3pCLEtBQUssSUFBSTtnQkFDTCxNQUFNLEdBQUcscUJBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLE1BQU07Z0JBQ1AsTUFBTSxHQUFHLHFCQUFLLENBQUMsSUFBSSxDQUFDO2dCQUNwQixNQUFNO1lBQ1YsS0FBSyxNQUFNO2dCQUNQLE1BQU0sR0FBRyxxQkFBSyxDQUFDLElBQUksQ0FBQztnQkFDcEIsTUFBTTtZQUNWLEtBQUssT0FBTztnQkFDUixNQUFNLEdBQUcscUJBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ3JCLE1BQU07WUFDVjtnQkFDSSxNQUFNLEdBQUcscUJBQUssQ0FBQyxHQUFHLENBQUE7Z0JBQ2xCLE1BQU07U0FDYjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUF0RGMsZUFBSSxHQUFZLEVBQUUsQ0FBQztJQUNuQixzQkFBVyxHQUFXLFNBQVMsQ0FBQztJQXNEbkQsaUJBQUM7Q0F4REQsQUF3REMsSUFBQTtBQXhEWSxnQ0FBVSIsImZpbGUiOiJsb2dzL2xvZy5mYWN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtsb2dDb25maWd9IGZyb20gJy4uL2NvbmZpZy9jZmcuY29uZmlnJ1xyXG5pbXBvcnQge0lMb2csIExldmVsfSBmcm9tICcuL2xvZy5pbnRlcmZhY2UnXHJcbmltcG9ydCB7Q29uc29sZUxvZ30gZnJvbSAnLi9sb2cuY29uc29sZSdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9nTGlzdCB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBJTG9nXHJcbn1cclxuZXhwb3J0IGNsYXNzIExvZ0ZhY3Rvcnkge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbG9nczogTG9nTGlzdCA9IHt9O1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgREVGQVVMVF9LRVk6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuXHJcbiAgICBzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyB8IG9iamVjdCk6IElMb2cge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IElMb2c7XHJcbiAgICAgICAgbGV0IGtleTogc3RyaW5nO1xyXG4gICAgICAgIGlmKCEhbmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAga2V5ID0gISFuYW1lID8gbmFtZSA6IExvZ0ZhY3RvcnkuREVGQVVMVF9LRVlcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQ6IGFueSA9IDxhbnk+bmFtZTtcclxuICAgICAgICAgICAga2V5ID0gdC5uYW1lIHx8IHQuY29uc3RydWN0b3IubmFtZSB8fCBMb2dGYWN0b3J5LkRFRkFVTFRfS0VZXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCFMb2dGYWN0b3J5LmxvZ3Nba2V5XSl7XHJcbiAgICAgICAgICAgIGxldCBsc2NoZW1hID0gbG9nQ29uZmlnW2tleV07XHJcbiAgICAgICAgICAgIGlmKCFsc2NoZW1hKSB7XHJcbiAgICAgICAgICAgICAgICBsc2NoZW1hID0gbG9nQ29uZmlnW0xvZ0ZhY3RvcnkuREVGQVVMVF9LRVldXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsID0gISFsc2NoZW1hLmxldmVsID8gbHNjaGVtYS5sZXZlbCA6ICdvbic7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAhIWxzY2hlbWEudHlwZSA/IGxzY2hlbWEudHlwZSA6ICdjb25zb2xlJztcclxuICAgICAgICAgICAgaWYodHlwZSA9PT0gJ2NvbnNvbGUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgQ29uc29sZUxvZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsOiBMb2dGYWN0b3J5LnRyYW5zTGV2ZWwobGV2ZWwpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIExvZ0ZhY3RvcnkubG9nc1trZXldID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gTG9nRmFjdG9yeS5sb2dzW2tleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHRyYW5zTGV2ZWwobGV2ZWw6IHN0cmluZyk6IExldmVsIHtcclxuICAgICAgICBsZXQgcmVzdWx0OiBMZXZlbCA9IExldmVsLk9GRjtcclxuICAgICAgICBzd2l0Y2ggKGxldmVsLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnb24nOiBcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IExldmVsLk9OO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2luZm8nOiBcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IExldmVsLklORk87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnd2Fybic6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBMZXZlbC5XQVJOO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IExldmVsLkVSUk9SO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBMZXZlbC5PRkZcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59Il19
