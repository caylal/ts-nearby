"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_factory_1 = require("../../logs/log.factory");
var http_base_1 = require("../../https/http.base");
var api_const_1 = require("../../api/api.const");
var util_1 = require("../../utils/util");
var app = getApp();
var log = log_factory_1.LogFactory.get("Index");
var http = new http_base_1.HttpBase();
Page({
    data: {
        StatusBar: app.globalData.StatusBar,
        CustomBar: app.globalData.CustomBar,
        bannerList: [],
        hotList: [],
        recList: [],
        pi: 1,
        ps: 10
    },
    onLoad: function () {
        console.log(this.data.CustomBar);
        wx.showLoading({
            title: '加载中...'
        });
        Promise.all([
            this.getBanner(),
            this.getHotGoods(),
            this.getRecGoods()
        ]).then(function (res) {
            wx.hideLoading({ success: function () { } });
        });
    },
    getBanner: function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            http.get(api_const_1.Apis.banner.queryBanner, { data: { pi: _this.data.pi, ps: _this.data.ps, nbhd: "N00001" } }).then(function (res) {
                var data = res;
                log.log("banner-list: ", res);
                if (!util_1.isEmpty(data.result)) {
                    _this.setData({
                        bannerList: data.result
                    });
                }
                else {
                    log.log(util_1.getPageUrl() + 'banner无数据', res);
                }
                resolve(true);
            }).catch(function (res) {
                log.log(util_1.getPageUrl() + "banner接口", res);
                reject(true);
            });
        });
    },
    getHotGoods: function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            http.get(api_const_1.Apis.hot.queryOfNbhd, { data: { pi: _this.data.pi, ps: _this.data.ps, nbhd: "N00001" } }).then(function (res) {
                var data = res;
                log.log("hot-list: ", data);
                if (!util_1.isEmpty(data.result)) {
                    data.result.map(function (item) {
                        item.url = "pages/good/index?url=" + api_const_1.Apis.hot.restful.get + "&&id=" + item.id;
                    });
                    _this.setData({
                        hotList: data.result
                    });
                }
                else {
                    log.log(util_1.getPageUrl() + "hotgood无数据", data);
                }
                resolve(true);
            }).catch(function (res) {
                log.log(util_1.getPageUrl() + "hotgood接口", res);
                reject(true);
            });
        });
    },
    getRecGoods: function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            http.get(api_const_1.Apis.rec.queryOfMy, { data: { pi: _this.data.pi, ps: _this.data.ps, nid: "N00001", uid: "U100000003" } }).then(function (res) {
                var data = res;
                if (!util_1.isEmpty(data.result)) {
                    data.result.map(function (item) {
                        item.url = "/pages/good/index?url=" + api_const_1.Apis.rec.restful.get + "&&id=" + item.id;
                        var num = parseFloat(item.retailprice);
                        item.retailprice = num.toFixed(2);
                    });
                    _this.setData({
                        recList: data.result
                    });
                }
                else {
                    log.log(util_1.getPageUrl() + "recgood接口", res);
                }
                resolve(true);
            }).catch(function (res) {
                log.log(util_1.getPageUrl() + "recgood接口", res);
                reject(true);
            });
        });
    },
    addCartListenner: function (e) {
        log.log("addCartListenner: ", e);
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
