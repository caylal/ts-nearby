"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_proxy_1 = require("./http.proxy");
var cfg_config_1 = require("../config/cfg.config");
var util_1 = require("../utils/util");
var HttpBase = (function () {
    function HttpBase() {
        this.freshStatus = false;
    }
    HttpBase.prototype.get = function (url, params) {
        return this.request(url, params);
    };
    HttpBase.prototype.post = function (url, params) {
        return this.request(url, params);
    };
    HttpBase.prototype.put = function (url, params) {
        return this.request(url, params);
    };
    HttpBase.prototype.delete = function (url, params) {
        return this.request(url, params);
    };
    HttpBase.prototype.request = function (api, params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.guard(api)) {
                var token = wx.getStorageSync('token');
                var dtNow = new Date().valueOf();
                if (!!token && token.expired < dtNow) {
                    if (!_this.freshStatus) {
                        _this.freshStatus = true;
                        http_proxy_1.HttpProxy.doRequest(cfg_config_1.Auth.refreshTokenUrl, false, { data: { refreshToken: token.refresh_token } }).then(function (res) {
                            var response_res = res.result;
                            if (response_res.token) {
                                response_res.token.expired = util_1.transExpiresDt(response_res.token.expires_in);
                                wx.setStorageSync('token', response_res.token);
                                _this.freshStatus = false;
                                http_proxy_1.HttpProxy.doRequest(api, true, params).then(function (res) {
                                    resolve(res);
                                }).catch(function (err) {
                                    reject(err);
                                });
                            }
                        }).catch(function (err) {
                            if (err.code === 210 || err.code === 220) {
                            }
                        });
                    }
                    else {
                        var result = _this.recurRequest(api, params);
                        resolve(result);
                    }
                }
                else {
                    http_proxy_1.HttpProxy.doRequest(api, true, params).then(function (res) { return resolve(res); }).catch(function (err) { return reject(err); });
                }
            }
            else {
                http_proxy_1.HttpProxy.doRequest(api, false, params).then(function (res) { return resolve(res); }).catch(function (err) { return reject(err); });
            }
        });
    };
    HttpBase.prototype.guard = function (api) {
        var result = false;
        if (cfg_config_1.Auth.enable) {
            result = true;
            if (api.indexOf(cfg_config_1.Auth.refreshTokenUrl) > 0) {
                result = false;
            }
            else if (api.indexOf(cfg_config_1.Auth.login) > 0) {
                result = false;
            }
        }
        return result;
    };
    HttpBase.prototype.recurRequest = function (api, params) {
        var _this = this;
        var result;
        if (this.freshStatus) {
            setTimeout(function () {
                _this.recurRequest(api, params);
            }, 1000);
        }
        else {
            result = http_proxy_1.HttpProxy.doRequest(api, true, params);
        }
        return result;
    };
    return HttpBase;
}());
exports.HttpBase = HttpBase;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
