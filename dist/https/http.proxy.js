"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_factory_1 = require("../logs/log.factory");
var http_interface_1 = require("./http.interface");
var cfg_config_1 = require("../config/cfg.config");
var util_1 = require("../utils/util");
var HttpProxy = (function () {
    function HttpProxy() {
    }
    HttpProxy.request = function (api, params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.guard(api)) {
                var token = wx.getStorageSync('token');
                var dtNow = new Date().valueOf();
                if (!!token && token.expired < dtNow) {
                    if (!_this.freshStatus) {
                        _this.freshStatus = true;
                        _this.doRequest(cfg_config_1.Auth.refreshTokenUrl, false, { data: { refreshToken: token.refresh_token } }).then(function (res) {
                            var response_res = res.result;
                            if (response_res.token) {
                                response_res.token.expired = util_1.transExpiresDt(response_res.token.expires_in);
                                wx.setStorageSync('token', response_res.token);
                                _this.freshStatus = false;
                                _this.doRequest(api, true, params).then(function (res) {
                                    resolve(res);
                                }).catch(function (err) {
                                    reject(err);
                                });
                            }
                        }).catch(function (err) {
                            if (err.code === 210 || err.code === 220) {
                            }
                        });
                    }
                    else {
                        var result = _this.recurRequest(api, params);
                        resolve(result);
                    }
                }
                else {
                    _this.doRequest(api, true, params).then(function (res) { return resolve(res); }).catch(function (err) { return reject(err); });
                }
            }
            else {
                _this.doRequest(api, false, params).then(function (res) { return resolve(res); }).catch(function (err) { return reject(err); });
            }
        });
    };
    HttpProxy.doRequest = function (api, tokenCheck, params) {
        var _this = this;
        var result;
        if (tokenCheck) {
            var token = wx.getStorageSync('token');
            if (!!token) {
                params = params || {};
                params.data = params.data || {};
                Object.assign(params.data, { access_token: token.access_token });
            }
        }
        api = this.urlPrefix(api, cfg_config_1.apiPrefix);
        if (this.isDebug) {
            this.log.log('mock request: ' + api, params);
        }
        else {
            var httpApi_1 = this.analyzeApi(api);
            if (!!params && !!params.path) {
                httpApi_1.url = this.urlFormat(httpApi_1.url, params.path);
            }
            this.log.log('requset: ' + http_interface_1.HttpMethod[httpApi_1.method] + ' ' + httpApi_1.url, params.data);
            var method_1 = http_interface_1.HttpMethod[httpApi_1.method];
            result = new Promise(function (resolve, reject) {
                wx.request({
                    url: httpApi_1.url,
                    data: params.data,
                    method: method_1,
                    header: {
                        'Content-Type': 'application/json'
                    },
                    success: function (res) {
                        _this.log.log('response: ' + http_interface_1.HttpMethod[httpApi_1.method] + ' ' + httpApi_1.url, res.data);
                        _this.dealWithCode({ response: res, resolve: resolve, reject: reject });
                    },
                    fail: function (res) {
                        reject(res);
                    }
                });
            });
        }
        return result;
    };
    HttpProxy.dealWithCode = function (_a) {
        var response = _a.response, resolve = _a.resolve, reject = _a.reject;
        var dataResponse = response.data;
        if (!!dataResponse && dataResponse.code === 100) {
            resolve(dataResponse);
        }
        else if (dataResponse.code === 210 || dataResponse.code === 220) {
            reject(dataResponse);
        }
        else {
            wx.showModal({
                title: "接口请求出错",
                showCancel: false,
                content: dataResponse.result + ("(" + dataResponse.code + ")")
            });
            reject(dataResponse);
        }
    };
    HttpProxy.recurRequest = function (api, params) {
        var _this = this;
        var result;
        if (this.freshStatus) {
            setTimeout(function () {
                _this.recurRequest(api, params);
            }, 1000);
        }
        else {
            result = this.doRequest(api, true, params);
        }
        return result;
    };
    HttpProxy.urlFormat = function (url, pathParam) {
        var result = url;
        if (!!pathParam) {
            for (var key in pathParam) {
                if (pathParam.hasOwnProperty(key)) {
                    result = result.replace('{' + key + '}', pathParam[key]);
                }
            }
        }
        return result;
    };
    HttpProxy.analyzeApi = function (api) {
        var result;
        if (typeof api === 'string') {
            var splits = api.split(' ');
            var method = http_interface_1.HttpMethod.GET;
            var url = void 0;
            if (splits.length === 1) {
                url = splits[0];
            }
            else {
                url = splits[1];
                switch (splits[0].toLowerCase()) {
                    case 'post':
                        method = http_interface_1.HttpMethod.POST;
                        break;
                    case 'put':
                        method = http_interface_1.HttpMethod.PUT;
                        break;
                    case 'delete':
                        method = http_interface_1.HttpMethod.DELETE;
                        break;
                    default:
                        method = http_interface_1.HttpMethod.GET;
                        break;
                }
            }
            result = {
                method: method,
                url: url
            };
        }
        else {
            result = api;
        }
        return result;
    };
    HttpProxy.urlPrefix = function (url, prefix) {
        var result = url;
        if (!!prefix) {
            if (url.indexOf(' ') > 0) {
                var splits = url.split(' ');
                result = splits[0] + ' ' + prefix + '/' + splits[1];
            }
            else {
                result = prefix + '/' + result;
            }
        }
        return result;
    };
    HttpProxy.guard = function (api) {
        var result = false;
        if (cfg_config_1.Auth.enable) {
            result = true;
            if (api.indexOf(cfg_config_1.Auth.refreshTokenUrl) > 0) {
                result = false;
            }
            else if (api.indexOf(cfg_config_1.Auth.login) > 0) {
                result = false;
            }
        }
        return result;
    };
    HttpProxy.log = log_factory_1.LogFactory.get(HttpProxy);
    HttpProxy.freshStatus = false;
    HttpProxy.isDebug = false;
    return HttpProxy;
}());
exports.HttpProxy = HttpProxy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
