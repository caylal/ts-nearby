"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_factory_1 = require("../logs/log.factory");
var http_interface_1 = require("./http.interface");
var cfg_config_1 = require("../config/cfg.config");
var _mock_1 = require("../api/__mock__/_mock");
var HttpProxy = (function () {
    function HttpProxy() {
    }
    HttpProxy.doRequest = function (api, tokenCheck, params) {
        var _this = this;
        var result;
        if (tokenCheck) {
            var token = wx.getStorageSync('token');
            if (!!token) {
                params = params || {};
                params.data = params.data || {};
                Object.assign(params.data, { access_token: token.access_token });
            }
        }
        if (cfg_config_1.cfgMock.enable) {
            this.log.log('mock request: ' + api, params);
            result = new Promise(function (resolve, reject) {
                _mock_1.getMock({ url: api, body: params }).then(function (res) {
                    _this.log.log('mock response: ' + api, res);
                    resolve(res);
                });
            });
        }
        else {
            api = this.urlPrefix(api, cfg_config_1.apiPrefix);
            var httpApi_1 = this.analyzeApi(api);
            if (!!params && !!params.path) {
                httpApi_1.url = this.urlFormat(httpApi_1.url, params.path);
            }
            this.log.log('requset: ' + http_interface_1.HttpMethod[httpApi_1.method] + ' ' + httpApi_1.url, params.data);
            var method_1 = http_interface_1.HttpMethod[httpApi_1.method];
            result = new Promise(function (resolve, reject) {
                wx.request({
                    url: httpApi_1.url,
                    data: params.data,
                    method: method_1,
                    header: {
                        'Content-Type': 'application/json'
                    },
                    success: function (res) {
                        _this.log.log('response: ' + http_interface_1.HttpMethod[httpApi_1.method] + ' ' + httpApi_1.url, res.data);
                        _this.dealWithCode({ response: res, resolve: resolve, reject: reject });
                    },
                    fail: function (res) {
                        reject(res);
                    }
                });
            });
        }
        return result;
    };
    HttpProxy.dealWithCode = function (_a) {
        var response = _a.response, resolve = _a.resolve, reject = _a.reject;
        var dataResponse = response.data;
        if (!!dataResponse && dataResponse.code === 100) {
            resolve(dataResponse);
        }
        else if (dataResponse.code === 210 || dataResponse.code === 220) {
            reject(dataResponse);
        }
        else {
            wx.showModal({
                title: "接口请求出错",
                showCancel: false,
                content: dataResponse.result + ("(" + dataResponse.code + ")")
            });
            reject(dataResponse);
        }
    };
    HttpProxy.urlFormat = function (url, pathParam) {
        var result = url;
        if (!!pathParam) {
            for (var key in pathParam) {
                if (pathParam.hasOwnProperty(key)) {
                    result = result.replace('{' + key + '}', pathParam[key]);
                }
            }
        }
        return result;
    };
    HttpProxy.analyzeApi = function (api) {
        var result;
        if (typeof api === 'string') {
            var splits = api.split(' ');
            var method = http_interface_1.HttpMethod.GET;
            var url = void 0;
            if (splits.length === 1) {
                url = splits[0];
            }
            else {
                url = splits[1];
                switch (splits[0].toLowerCase()) {
                    case 'post':
                        method = http_interface_1.HttpMethod.POST;
                        break;
                    case 'put':
                        method = http_interface_1.HttpMethod.PUT;
                        break;
                    case 'delete':
                        method = http_interface_1.HttpMethod.DELETE;
                        break;
                    default:
                        method = http_interface_1.HttpMethod.GET;
                        break;
                }
            }
            result = {
                method: method,
                url: url
            };
        }
        else {
            result = api;
        }
        return result;
    };
    HttpProxy.urlPrefix = function (url, prefix) {
        var result = url;
        if (!!prefix) {
            if (url.indexOf(' ') > 0) {
                var splits = url.split(' ');
                result = splits[0] + ' ' + prefix + '/' + splits[1];
            }
            else {
                result = prefix + '/' + result;
            }
        }
        return result;
    };
    HttpProxy.log = log_factory_1.LogFactory.get(HttpProxy);
    return HttpProxy;
}());
exports.HttpProxy = HttpProxy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
